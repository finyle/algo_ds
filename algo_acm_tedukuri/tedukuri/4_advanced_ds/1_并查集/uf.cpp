// 并查集： 可以动态维护若干个不重叠的集合，并支持合并与查询的数据结构；包括两个操作：
// get: 查询一个元素属于哪一个集合； merge：把两个集合合并成一个大集合
// 首先定义集合的表示方法： 代表元： 为每个集合选择一个固定的元素，作为整个集合的代表
// 其次：定义归属关系的表示方法：
// 1. 维护一个数组，用f[x]保存元素x所在集合的代表
// 2. 使用树形结构存储每个集合，树上的每个节点都是一个元素，树根即是集合的代表元素。整个并查集实际上是一个森林(若干棵树)


// 1. 路径压缩与按秩合并:
// exp: 程序自动分析: 判断一些约束条件是否能被同时满足，判定是可以分别为每个变量赋予恰当的值，使得上述所有约束条件同时被满足。

// exp: supermarket: 给定n个商品，每个商品有利润pi和过期时间di，每天只能卖一个商品，过期商品不能卖，如何安排每天卖的商品，可以使收益最大？

// 2. “扩展域”与”边带权“的并查集: 并查集实际上是由若干棵树构成的森林，可以在树中的每条边上记录一个权值
// exp: 银河英雄传说

// exp: parity game: A写一个由0和1组成的序列S，长度为N，B向A提出M个问题，每个问题中，B指定两个数l和r，A回答s[l-r]中有奇数个1还是偶数个1

// exp: 食物链： 三类动物，A吃B， B吃C， C吃A，有n只动物，每只都属于其中一种，