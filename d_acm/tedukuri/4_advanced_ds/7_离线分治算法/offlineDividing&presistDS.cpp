// 离线分治算法：
// 数据结构问题：维护一系列数据，并对一系列操作依次做出响应的形式，这些操作一般位统计数据的查询操作和更新数据状态的修改操作
// 在线算法：依次获得每项操作，能够在每次查询时立即回答正确的结果，然后再继续执行下一次操作。
// 离线算法：需要预先知道整个操作序列，经过一系列计算，最后批量回答所有查询的结果

// 根据两种操作在时间轴上分布的不同，可以把上述数据结构问题分成”动态”和“静态”两类。只包含查询或一切查询行为都在修改行为后的问题称为静态问题；其余问题为动态问题

// 1. 基于时间的分治算法
// exp: 天使玩偶：二维平面移动，

// 2. 基于值域的整体分治算法：
// exp: k-th number:给定长度为N的整数序列A， 执行M次操作，其中第i次操作给出三个整数Li，Ri，Ki， 求A[L-R]中第Ki小的数是多少？




// 可持久化的数据结构：
// 目前为止学习的数据结构都是“数据集的最新状态”，若想知道数据集在任意时间的历史状态，在执行完第i项操作后，把整个数据结构拷贝一遍，存储在history[i]中
// 1. 可持久化Trie：
// exp: 最大异或和: 给定一个非负整数序列a，初始长度为N，有M个操作，两种操作类型：Ax 添加操作，表示在序列末尾插入一个数x，序列的长度N增大1；Qlrx询问操作，求一个为止p，满足l<=p<=r,使得a[p] xor a[p+1] 最大，输出这个最大值


// 2. 可持久化线段树：维护了每次操作之后线段树的历史形态，难以支持大部分区间修改
// exp: K-th number: