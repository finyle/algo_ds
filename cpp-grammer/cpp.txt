
1. cpp 静态库 动态库
在C++中，静态库和动态库是两种不同的库形式，它们各有优点和使用场景。

静态库（Static Library）:

优点：静态库会在编译时直接复制到可执行文件中，因此发布软件时不需要提供静态库文件。

缺点：如果多个程序使用同一个静态库，会在每个可执行文件中都有一个副本，占用更多磁盘空间。

创建：在Linux下通常是.a文件，在Windows下是.lib文件。

使用：在编译链接时指定静态库路径和库名。

动态库（Dynamic Library）:

优点：动态库在编译时不复制到可执行文件中，可执行文件运行时由操作系统动态加载库文件。多个程序使用同一个动态库时，库文件只需在内存中加载一次。

缺点：发布软件时需要确保目标机器上有对应的动态库。

创建：在Linux下通常是.so文件（共享对象），在Windows下是.dll文件（动态链接库）。

使用：在运行时确保动态库路径可以被系统找到。

以下是创建静态库和动态库的简单示例：

*******************************
2. https://blog.csdn.net/qq_36709685/article/details/118072764
c++ 程序生命周期
预处理
编译
汇编
链接

*******************************
3. https://www.zhihu.com/question/577337677/answer/2883782803
c++ std++move
move仅仅是一个类型转换，从一个左值引用(&)转换成右值(&&)，仅此而已。
C++中有四个特殊的成员函数：默认构造函数、析构函数，拷贝构造函数，拷贝赋值运算符。之所以称之为特殊的成员函数，这是因为如何开发人员没有定义这四个成员函数，那么编译器则在满足某些特定条件(仅在需要的时候才生成，比如某个代码使用它们但是它们没有在类中明确声明)下，自动生成。这些由编译器生成的特殊成员函数是public且inline。自C++11起，引入了另外两只特殊的成员函数：移动构造函数和移动赋值运算符。如果开发人员没有显示定义移动构造函数和移动赋值运算符，那么编译器也会生成默认

*******************************
4. cpp中的右值引用
右值引用（rvalue reference）是 C++11 引入的一个新特性，用于表示对临时对象（右值）的引用。右值是指那些无法被修改的临时对象，比如函数返回的临时对象、移动语义中的源对象等。右值引用的语法是 &&。
右值引用的主要目的是支持移动语义，即将资源（比如内存、文件句柄等）从一个对象转移到另一个对象而不需要进行深层拷贝，从而提高性能和效率
