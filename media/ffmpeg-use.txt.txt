1、命令行参数介绍
Print help/info:	Description
--help topic	show help
-version	show version
-formats	show available formats
-muxers	show available muxers
-demuxers	show available demuxers
-devices	show available devices
-codecs	show available codecs
-decoders	show available decoders
-encoders	show available encoders
-protocols	show available protocols
-filters	show available filters
-pix_fmts	show available pixel formats
-sample_fmts	show available sample formats
-hwaccels	show available HW acceleration
Global options:	Description
-v loglevel	set logging level
-y	overwrite output files
-n	never overwrite output files
-filter_threads	number of filter threads
-vol volume	change audio volume(256=normal)
main options:	Description
-f fmt	force format
-c codec	codec name
-codec codec	codec name
-t duration	duration seconds of audio/video
-to time_stop	record or transcode stop time
-ss time_off	set the start time offset
-frames number	set the number of frames
-discard	discard
-disposition	disposition
Video options:	Description
-vframes number	set the number of video frames
-r rate	set frame rate (Hz value)
-s size	set frame size
-aspect aspect	set aspect ratio (4:3, 16:9)
-vn	disable video
-vcodec codec	force video codec
-vf filter_graph	set video filters
-ab bitrate	audio bitrate (please use -b:a)
-b bitrate	video bitrate (please use -b:v)
Audio options:	Description
-aframes number	set the number of audio frames
-aq quality	set audio quality
-ar rate	set audio sampling rate (in Hz)
-ac channels	set number of audio channels
-an	disable audio
-acodec codec	force audio codec
-vol volume	change audio volume(256=normal)
-af filter_graph	set audio filters
命令行整体格式：以ffmpeg开头，参数之间用空格隔开，每个参数key以"-"开头，后面跟着参数value，输出文件放在命令行最后。

2、音频常见操作
2.1 音频转码
直接转码：
ffmpeg -i input.mp3 output.m4a
指定编码器、采样率、声道数转码：
ffmpeg -i input.mp3 -acodec aac -ac 2 -ar 44100 output.m4a

2.2 音频剪切
-ss 10指定从第10秒开始，-t 20代表剪切20秒
ffmpeg -i input.mp3 -ss 10 -t 20 cut.mp3

2.3 音频拼接
ffmpeg -i concat:"hello.mp3|world.mp3" -acodec copy -vn concat.mp3

2.4 音频混音
使用amix，参数inputs代表输入流个数，duration有longest、shortest、first三种模式，weights设置每条流音量权重占比：
ffmpeg -i hello.mp3 -i world.mp3 -filter_complex amix=inputs=2:duration=first -vn mix.mp3
使用amerge，合并成多声道输出：
ffmpeg -i hello.mp3 -i world.mp3 -filter_complex [0:a][1:a]amerge=inputs=2[aout] -map [aout] merge.mp3

2.5 空灵音效
aecho接收4个参数：in_gain (0, 1]；out_gain (0, 1]；delays (0 - 90000]；decays (0 - 1.0]
ffmpeg -i input.mp3 -af aecho=0.8:0.8:1000:0.5 echo.mp3

2.6 惊悚音效
tremolo接收2个参数：frequency [0.1, 20000.0]；depth (0, 1]
ffmpeg -i input.mp3 -af tremolo=5:0.9 tremolo.mp3

2.7 搞笑音效
搞笑音效通过调节音速实现，使用atempo：
ffmpeg -i input.mp3 -filter_complex atempo=0.5 atempo.mp3

2.8 静音检测
ffmpeg -i input.mp3 -af silencedetect=noise=0.0001 -f null -

2.9 修改音量
ffmpeg -i input.mp3 -af volume=0.5 volume.mp3

2.10 抽取音频
从视频抽取音频，直接disable视频流：
ffmpeg -i input.mp4 -vn out.mp3
从视频抽取音频，disable视频流，音频进行转码：
ffmpeg -i input.mp4 -acodec aac -vn out.m4a
从视频抽取音频，如果存在多音轨，可指定某个音轨：
ffmpeg -i input.mp4 -map 0:1 -vn out.mp3

3、视频常见操作
3.1 视频剪切
基本剪切，指定起始时间、剪切时长：
ffmpeg -i input.mp4 -ss 10 -t 20 -codec copy cut.mp4
精确剪切，包含多音轨，-map 0代表所有track流进行剪切，-accurate_seek代表精确seek：
ffmpeg -i input.mp4 -ss 10 -accurate_seek -t 20 -map 0 -codec copy cut.mp4

3.2 视频转码
使用-vcodec指定视频编码，-acodec指定音频编码，-s 640x480指定视频分辨率，
-b 200k指定码率，-r 20指定帧率，这样达到视频压缩效果：
ffmpeg -i input.mp4 -vcodec libx264 -acodec aac -s 640x480 -b 200k -r 20 transcode.mp4

3.3 视频截图
使用-vframes指定截图数量，-ss指定起始时间放在-i前面，这样保证先seek到指定位置再截图。
如果是先-i指定输入文件再-ss，是从时间0开始解码，直到指定时间再截图，这样效率太低：
ffmpeg -ss 10 -i input.mp4 -f image2 -vframes 1 -an screenshot.jpg

3.4 图片水印
使用-filter_complex指定位置overlay=x:y，如下所示：
ffmpeg -i input.mp4 -i logo.png -filter_complex overlay=10:20 pic_watermark.mp4
如果要灵活设置左上角、右上角、左下角、右下角位置，可以使用case语句，其中main_w代表视频宽度，
main_h代表视频高度，overlay_w代表水印宽度，overlay_h代表水印高度：

public static String obtainOverlay(int offsetX, int offsetY, int location) {
    switch (location) {
        case 2:
            return "overlay='(main_w-overlay_w)-" + offsetX + ":" + offsetY + "'";
        case 3:
            return "overlay='" + offsetX + ":(main_h-overlay_h)-" + offsetY + "'";
        case 4:
            return "overlay='(main_w-overlay_w)-" + offsetX + ":(main_h-overlay_h)-" + offsetY + "'";
        case 1:
        default:
            return "overlay=" + offsetX + ":" + offsetY;
    }
}

public static String[] addWaterMarkImg(String inputPath, String imgPath, int location,
                                           int offsetXY, String outputPath) {
    String overlay = obtainOverlay(offsetXY, offsetXY, location);
    String waterMarkCmd = "ffmpeg -i %s -i %s -filter_complex %s -preset:v superfast %s";
    waterMarkCmd = String.format(waterMarkCmd, inputPath, imgPath, overlay, outputPath);
    return waterMarkCmd.split(" ");
}
3.5 GIF水印
使用-ignore_loop 0代表GIF循环显示，其他操作与图片水印一致：
ffmpeg -i input.mp4 -ignore_loop 0 -i logo.gif -filter_complex overlay=10:20 gif_mark.mp4

3.6 去除水印
使用delogo命令，然后指定水印位置：
ffmpeg -i input.mp4 -filter_complex delogo=x=10:y=20:w=90:h=30 delogo.mp4

3.7 视频拼接
视频拼接分为垂直拼接、水平拼接，还有前后拼接，这里主要介绍垂直与水平拼接，其中使用hstack做水平拼接，vstack做垂直拼接：
ffmpeg -i input1.mp4 -i input2.mp4 -filter_complex hstack out.mp4

3.8 视频翻转
使用reverse实现视频翻转，但是处理比较耗时：
ffmpeg -i input.mp4 -vf reverse -an output.mp4

3.9 视频降噪
使用-nr代表noise reduction，进行视频降噪：
ffmpeg -i in.mp4 -nr 500 out.mp4

3.10 视频抽帧
ffmpeg -ss 20 -accurate_seek -t 10 -i input.mp4 -an -r 5 %3d.jpg

3.11 播放速度
使用setpts设置视频速度，atempo设置音频速度：
ffmpeg -i in.mp4 -filter_complex [0:v]setpts=%.2f*PTS[v];[0:a]atempo=%.2f[a] -map [v] -map [a] out.mp4

3.12 黑白视频
ffmpeg -i in.mp4 -vf lutyuv='u=128:v=128' out.mp4

二、ffplay命令行
ffplay主要用于播放视频，也可以播放网络流，示例如下：
ffplay -i beyond.mp4

三、ffprobe命令行
ffprobe主要用于检测多媒体信息，包括时长、视频分辨率、帧率、音频采样率、声道数、每个stream流信息等等。
支持显示形式包括：json和xml，例如-print_format json
ffprobe -i input.mp4 -show_streams -show_format -print_format json

如果要显示每帧数据信息，使用-show_frames可以显示pts、packet_size、duration、frame_type等信息：
ffprobe -i input.mp4 -show_frames

如果只要显示视频流，使用-select_streams v。其中v代表video，a代表audio，s代表subtitle。
ffprobe -i input.mp4 -show_frames -select_streams v


##############################################################
查找摄像头名称：
ffmpeg -list_devices true -f dshow -i dummy
HP TrueVision HD Camera
实时预览摄像头
ffplay -f dshow -i video="HP TrueVision HD Camera"
通过摄像头捕获视频并将其保存为文件
ffmpeg -f dshow -i video="HP TrueVision HD Camera" output.mp4

#################################################################
https://www.cnblogs.com/tinywan/p/6120995.html

ffmpeg 拉取 rtsp 摄像头视频流
ffmpeg -rtsp_transport tcp -i rtsp://admin:12345@192.168.18.252:554/h264/ch1/main/av_stream -c:a copy -c:v libx264 -f flv rtmp://stream.amaitech.com/live/4001480473625vhost=tinywan.amai8.com

ffmpeg 命令集
1. 视频格式转换 
ffmpeg -i input.avi output.mp4
ffmpeg -i input.mp4 output.ts 
2. 获取视频信息
ffmpeg -i video.avi 
3.1 提取音频
ffmpeg -i test.mp4 -acodec copy -vn output.aac 
ffmpeg -i test.mp4 -acodec aac -vn output.aac 
3.2 提取音频和视频
ffmpeg -i F:\Tinywan\Video\test.mkv -vcodec copy -an F:\Tinywan\Video\output_file_video.mp4
ffmpeg -i F:\Tinywan\Video\test.mkv -acodec copy -vn F:\Tinywan\Video\output_file_audio.mp3
4. 视频剪切 
ffmpeg -ss 00:00:00 -t 00:05:00 -y -i "F:\Tinywan\Video\test.mkv" -vcodec copy -acodec copy F:\Tinywan\Video\cutVideo.mp4
5. 视频截图
ffmpeg -i F:\Tinywan\Video\test.mkv -y -f mjpeg -ss 3 -t 1  F:\Tinywan\Video\test1.jpg
ffmpeg -i F:\Tinywan\Video\test.mkv -y -f image2 -ss 3 -vframes 1 F:\Tinywan\Video\test2.jpg 
6. 获取视频时常 
ffmpeg -i F:\Tinywan\Video\test.mkv 2>&1 | grep 'Duration' | cut -d ' ' -f 4 | sed s/,// 
7. 将rtmp流 以文件的形式保存到本地
ffmpeg -i "rtmp://tinywan.amai8.com/live123/4008899 live=1" -acodec copy -vcodec copy -f flv -y F:\Tinywan\Video\RTMPtest2test.flv
8. 原样视频mp4格式转换成avi格式输出
ffmpeg -i cutVideo.mp4  -vcodec copy -acodec copy cutVideoCopy.avi
9. 设定输出视频码率为64kbit/s 
ffmpeg -i cutVideo.mp4 -b:v 64k -bufsize 64k -y output64.mp4 
10. 切换帧率24fps
ffmpeg -i input.avi -r 24 output.avi
11. 导出图片 
ffmpeg -i cutVideo.mp4 -r 1 -s 1680*1050 -f image2 foo-%03d.jpeg
12. 从图片生成视频
ffmpeg -f image2 -framerate 12 -i foo-%03d.jpeg -s 640*320 fooimage2.avi

13. 码率控制
码率控制对于在线视频比较重要。因为在线视频需要考虑其能提供的带宽。
那么，什么是码率？很简单： 
bitrate = file size / duration 
比如一个文件20.8M，时长1分钟，那么，码率就是： 
biterate = 20.8M bit/60s = 20.8*1024*1024*8 bit/60s= 2831Kbps 
一般音频的码率只有固定几种，比如是128Kbps， 
那么，video的就是 
video biterate = 2831Kbps -128Kbps = 2703Kbps。
说完背景了。好了，来说ffmpeg如何控制码率。 
ffmpg控制码率有3种选择，-minrate -b:v -maxrate 
-b:v主要是控制平均码率。 
比如一个视频源的码率太高了，有10Mbps，文件太大，想把文件弄小一点，但是又不破坏分辨率。 
ffmpeg -i input.mp4 -b:v 2000k output.mp4 
上面把码率从原码率转成2Mbps码率，这样其实也间接让文件变小了。目测接近一半。 
不过，ffmpeg官方wiki比较建议，设置b:v时，同时加上 -bufsize 
-bufsize 用于设置码率控制缓冲器的大小，设置的好处是，让整体的码率更趋近于希望的值，减少波动。（简单来说，比如1 2的平均值是1.5， 1.49 1.51 也是1.5, 当然是第二种比较好） 
ffmpeg -i input.mp4 -b:v 2000k -bufsize 2000k output.mp4
-minrate -maxrate就简单了，在线视频有时候，希望码率波动，不要超过一个阈值，可以设置maxrate。 
ffmpeg -i input.mp4 -b:v 2000k -bufsize 2000k -maxrate 2500k output.mp4

14. 视频编码格式转换
比如一个视频的编码是MPEG4，想用H264编码，咋办？ 
ffmpeg -i input.mp4 -vcodec h264 output.mp4 
相反也一样 
ffmpeg -i input.mp4 -vcodec mpeg4 output.mp4
当然了，如果ffmpeg当时编译时，添加了外部的x265或者X264，那也可以用外部的编码器来编码。（不知道什么是X265，可以Google一下，简单的说，就是她不包含在ffmpeg的源码里，是独立的一个开源代码，用于编码HEVC，ffmpeg编码时可以调用它。当然了，ffmpeg自己也有编码器） 
ffmpeg -i input.mp4 -c:v libx265 output.mp4 
ffmpeg -i input.mp4 -c:v libx264 output.mp4

15. 只提取视频es数据
这个可能做开发的人会用到，顺便提一下吧。 
ffmpeg –i input.mp4 –vcodec copy –an –f m4v output.h264

16. 过滤器使用
16.1 将输入的1920x1080缩小到960x540输出:
ffmpeg -i input.mp4 -vf scale=960:540 output.mp4 
16.2 为视频添加logo
比如，我有这么一个图片 
iqiyi logo 
想要贴到一个视频上，那可以用如下命令： 
./ffmpeg -i input.mp4 -i iQIYI_logo.png -filter_complex overlay output.mp4 
结果如下所示： 
add logo left 
要贴到其他地方？看下面： 
右上角： 
./ffmpeg -i input.mp4 -i logo.png -filter_complex overlay=W-w output.mp4 
左下角： 
./ffmpeg -i input.mp4 -i logo.png -filter_complex overlay=0:H-h output.mp4 
右下角： 
./ffmpeg -i input.mp4 -i logo.png -filter_complex overlay=W-w:H-h output.mp4
16.3 去掉视频logo
有时候，下载了某个网站的视频，但是有logo很烦，咋办？有办法，用ffmpeg的delogo过滤器。 
语法：-vf delogo=x:y:w:h[:t[:show]] 
x:y 离左上角的坐标 
w:h logo的宽和高 
t: 矩形边缘的厚度默认值4 
show：若设置为1有一个绿色的矩形，默认值0。
ffmpeg -i input.mp4 -vf delogo=0:0:220:90:100:1 output.mp4


##############
小众用法：
1. h264编码profile & level 控制
2. 编码效率和视频质量的取舍 preset crf 
3. h265(hevc)编码tile & level 控制 
4. 为视频重新编码以适合在ipod/iphone上播放